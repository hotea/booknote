务实 no nonsense
简单即力量 power cloaked in simplicity
由于缺乏大型的解决空间，因而产生了更小，更简单更专用的程序

#UNIX中，常将"main memory"主存称为"core"，核心，因为在使用半导体作为内存材料之前，便是使用核心。核心映像core image就是进程执行当时的内存内容.

系统文档分为参考手册和使用手册，后者是系统各功能的教学手册，把整份文件读完就可能学会UNIX

软件工具的原则：
一次做好一件事
处理文本行，不要处理二进制数据
使用正则表达式
默认使用标准输入输出
避免喋喋不休(没有消息就是好消息;你叫它做什么，你就会得到什么)
输出格式必须与可接受的输入格式一致
让工具去做困难的部分
构建特定工具前，先想想

"啊哈，这不是编译型程序，那么一定是shell脚本"

构造管道时，应该试着让每个阶段的数据量变得更少

stty -echo		#关闭自动打印输入字符
set -x			#打开跟踪

可以用LC_ALL来强制设置单一locale；而LANG则是用来设置locale的默认值，大多时候应避免为任何LC_xxx变量赋值
POSIX等同C
locale -a 列出系统认得哪些locale

fgrep使用不同算法，可以匹配多个字符串
grep -F 固定字符串.若模式不含正则元字符，默认使用-F
-E = egrep, -F = fgrep
-e pat-list
-f pat-file
-l 只列出文件名
-q 静默
-s 不显示错误，常与-q并用
-v 显示不匹配


collating symbol:将多字符序列视为一个单位，[. .]
equivalence class:等价字符集，[= =]
方括号表达式中，将]放到第一个字符，-放到最后一个字符
方括号里的范围应避免使用，改用字符集(locale原因)
查看POSIX量词最大重复，getconf RE_DUP_MAX

sed -e 多个命令
    -f script-file
    -n 只打印p指定的行
sed 's/^/mkdir /' | sh -x  插入命令，以shell跟踪模式执行
&在替代文本里表示“从此点开始替代成匹配表达式的文本”
sed会记得遇到的最后一个regex，使用空的regex，同一个可再使用
!s 否定
"从最左边开始，扩展至最长"
大部分简易程序都是处理输入数据的行，像grep,sed(99%)
程序语言多半是处理字符串，如awk,Perl,Python

expand,unexpand空格制表互换

awk省略pattern则会对每一条记录执行action；省略action则等同于{ print },打印整条记录
print的参数间用逗号隔开
RS,RecordSeparator, RS=""指记录以空行隔开


sort -b  #忽略开头空白
     -c  #检查是否已排序
     -d  #字典顺序
     -g  #一般数值，以浮点类型，仅gnu
     -f  #忽略大小写
     -k  #指定排序字段
     -m  #将已排序输入合并为排序后输出
     -n  #整数类型
     -o  #输出文件
     -t  #指定字段分隔符
     -u  #丢弃相同键值记录，保留第一条，丢弃记录其他部分可能是不同值
     --stable #稳定排序

当工作终止时，删除临时文件：
trap "exit 1" HUP INT PIPE QUIT TERM
trap "rm -f $TMPFILE " EXIT


